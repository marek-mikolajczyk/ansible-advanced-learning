# filters
list: aaa['0']
dict: bbb['value'] or bbb.value

# filters from jinja or provided by ansible

# vars
mandatory
default('AAA', True) - True if var is empty string or false
### declare undefined variable
# null
# or ~

# single list
ordered can call list[0]
my_var[1] == 'ola'
random 
unique | list
sort
min,max,sum
lenght,first,last
#FLATTEN - merge sub lists

# multiple lists
union
difference
intersect

### dictionaries
combine - join dictionaries
# called maps or hashes
# link keys to values 
# access by dict['key']


### mathematics
# "{{ [1, 2, 3] }}" is eq( [1,2,3])

### my_var is False
#   my_var | default('44', True)  - my_var is  44
#   my_var | default('44', False)  - my_var is  False

### my_var is null
#   my_var | default('44', True)  - my_var is  44
#   my_var | default('44', False)  - my_var is  ""

### text
capitalize, string
quote
lower, |upper
replace('ar','**')
# regex_search('ar\S*r')
# regex_replace('ar(\S*)r','\\1mb')

### lists
# unique, sort
#! map
#   ansible localhost -m debug -a "msg={{ users | map(attribute='location') | join(',') }}" -e @4map.yaml

### vars
# mandatory

# default 

Filters don't create variable. But True/False gives that possibility.
if we (T), then ansible defines variable on empty/null var. 
If (F), ansible doesnt' try to define empty/null and result staus empty

default(my_default, True) + initial value empy(null)/False - set to default
default(my_default, False) + inital value empty/False - stay empty/False
!!! default(omit) - stay undefined. skip parameter in module

undefined var - playbook fails



### math
# / - result float
# // - result integer (not .12345)
# | int
# | root


### lists
# | sum, | length
# | first, | last, | random
# | sort, | reverse, | shuffle
# | flatten for nested lists
# | unique. after lists have no duplicated values, then
#  !!! no duplicated elements - then this will work  | union, |intersect, | difference
# to dictionary: | items2dict


### dictionaries
# combine - 2nd dictionary has higher priority
# to list: | dict2items

# hashing
# | hash('sha1'), | password_hash('sha512')
# | b64encode

# json, yaml
# json_query('[*].name')
# to_json, to_nice_json
# to_yaml, to_nice_yaml

# map filter

map - apply filter on sequenceof objects or lookup attribute
https://jinja.palletsprojects.com/en/2.10.x/templates/#map

1.you have a list of users but you are only interested in a list of usernames:
or facts and want to see only devices of mounts

{{ ansible_mounts | map(attribute='device') }}
{{ ansible_mounts | map(attribute='device') | join(',') }}

['/dev/sdb', '/dev/sdd', '/dev/sdc', '/dev/loop0']
/dev/sdb,/dev/sdd,/dev/sdc,/dev/loop0


2. alternatively, use map filter to invoke a filter with arguments

{{ ansible_mounts | map(attribute='device') | map('upper') }}

########################
### lookup plugins
########################

lookups - to use data from external sources
ansible-doc -t lookup -l

lookup - returns string
query - returns list
file  - on control node!
  - from_yaml, | from_json
template
env - on control node!
command - on control node!
    query('pipe', 'ls /dev/sd*')
      - 'pipe'
     !!!  - 'lines' - this is much better, gives lines
    # pipe - command output
# get first line from list of files
combine query('lines', 'file1', 'file2') as loop input with item[0]

#lookup/query errors handling
add errorS='warn'/'strict'/'ignore'

!!! use {{ | quote }} after password 

!!! use variables in lookup syntax, ex. 
"{{ lookup('template','webapp.' + locale + '.j2') }}"

lookup_plugins directory with playbook location

password - generate random password
    - name: use lookup password
      debug:
        msg: |
          my password is {{ lookup('password', 'credentials/' + item + ' length=3' ) }}
      loop:
        - tomek
        - zosia

########################
### advanced loops
########################

loop - on flat list

# previously - with_<lookup plugin>

# loop: "{{ mylist }}" = with_list: "{{ mylist }}" = loop: "{{ lookup('list', mylist) }}"


### list of lists = flatten(levels=1)
to move from with_items, create new variable with lists inside, the use flatten
"{{ list_of_lists | flatten(levels=1) }}"

OLD:
with_items:
 - list a
 - list b
NEW:
loop: "{{ list_of_lists | flatten(levels=1) }}"
vars:
  list_of_lists:
    - "{{ app_a_tmp_files }}"
    - "{{ app_b_tmp_files }}"
    - "{{ app_c_tmp_files }}"

### list of nested lists (with dictionaries) = subelements
LDL = subelements
[{[x]}]
subelements create single list from lists with nested lists
it processes list of dictionaries, where each dictionary contains key that refers to list.
subelements use that key
# creates list with nested lists
# - name: john
# password: "{{ john_pass }}"
# authorized:
# - keys/john_key.pub
### equivalent to
# aa: "{{ item.0.name }}"
# loop: "{{ users|subelements('authorized') }}"

### iterate over dictionary - just use | dict2items, and remember item.key and item.value.xxx
# to iterate over dict - we need to make it a list
# before
#user:
#name: "{{ item.key }}"
#comment: "{{ item.value.name }}"
#state: present
#with_dict: "{{ users }}"
# after
#user:
#name: "{{ item.key }}"
#comment: "{{ item.value.name }}"
#state: present
#loop: "{{ users | dict2items }}"

summary:
list of lists - use | flatten(levels=1)
list of dictionaries with list - use subelements('key')
dictionaries - use | dict2items
files with pattern - use query('fileglob', '/tmp/[a-c]')

msg: "{{ lookup('fileglob', '~/.bash*') }}" - but this is string
msg: "{{ query('fileglob', '~/.bash*') }}" - query will return a list
before
 with_fileglob:
 - "~/.bash*"